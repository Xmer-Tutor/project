{"version":3,"sources":["images/logo.jpeg","Login.jsx","Header.jsx","Dashboard.jsx","MyLearning.jsx","CourseList.jsx","Cart.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["module","exports","LoginPanel","loginUser","user","useState","username","setUsername","redirect","setRedirect","to","push","className","value","type","onChange","target","disabled","onClick","then","Header","logout","isLoggedIn","border","src","require","alt","width","height","Dashboard","rows","courses","map","idx","imgUrl","id","key","MyLearning","items","videos","reduce","list","selected","filter","indexOf","length","title","frameborder","allow","allowfullscreen","CourseList","addToCart","courseType","course","isDisabled","description","price","Cart","cartItems","checkout","removeFromCart","cartRows","App","login","setCourses","cart","setCart","purchased","setPurchased","useEffect","fetch","method","headers","Headers","catch","Promise","reject","code","response","ok","json","result","onLoginSuccess","onCourseFetchSuccess","data","body","JSON","stringify","fetchLogin","fetchAddToCart","routes","exact","path","Login","render","typeIndex","match","params","item","fetchRemoveFromCart","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.69080602.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b297c66f.jpeg\";","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './login.css';\n\nconst LoginPanel = ({ loginUser, user }) => {   \n    const [ username, setUsername ]  = useState(user.username);\n    const [ redirect, setRedirect ] = useState();\n\n    const changeUsername = ({ target: { value }}) => setUsername(value);\n    const login = () => loginUser(username).then(setRedirect);\n\n    if(redirect) {\n        return (\n            <Redirect to={redirect} push />\n        )\n    }\n\n    return (\n        <div className=\"login-panel\"> \n            <span>Login</span>\n            <input\n                value={username}\n                type='text'\n                onChange={changeUsername}\n            />\n            <button\n                disabled={!username}\n                onClick={login}\n            >\n                Login\n            </button>\n        </div>\n    );\n};\n\nexport default LoginPanel;","import React from 'react';\nimport './header.css';\nimport { Link } from 'react-router-dom';\n\nconst Header = ({ user, logout }) => {\n    const isLoggedIn = user.username;\n\n    return (\n        <div className=\"Application-header\">\n            <div>\n                <Link\n                    to='/'\n                >\n                    <img className=\"company-logo\" border=\"0\" src={require('./images/logo.jpeg')} alt=\"logo\" width=\"40\" height=\"40\"/>\n                </Link>\n                <h1 className=\"company-name\">Tek Learning</h1>\n            </div>\n\n            {isLoggedIn && (\n                <div>\n                    <Link\n                        to='/myLearning'\n                    >\n                        <h2>\n                            My Learning\n                        </h2>\n                    </Link>\n                    <Link\n                        to='/cart'\n                    >\n                        <h2>\n                            Cart\n                        </h2>\n                    </Link>\n                    <h2>\n                        {user.username}\n                    </h2>\n                    <button onClick={logout}>\n                        Logout\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './dashboard.css';\n\nconst Dashboard = ({ courses: courseList }) => {\n    const rows = courseList.map(({ type, courses }, idx) => {\n        const imgUrl = `https://img.youtube.com/vi/${courses[0].id}/0.jpg`;\n\n        return (\n            <Link\n                key={type}\n                className='courseType'\n                to={`/courseType/${idx}`}\n            >\n                <img\n                    alt='thumbnail'\n                    src={imgUrl}\n                />\n\n                <h3>\n                    {type}\n                </h3>\n            </Link>\n        )\n    });\n\n    return (\n        <div className='dashboard'>\n            {rows}\n        </div>\n    )\n}\n\nexport default Dashboard;","import React from 'react';\n\nconst MyLearning = ({ courses, items }) => {\n    const videos = courses.reduce((list, type) => {\n        const selected = type.courses.filter(({ id }) => items.indexOf(id) >= 0);\n\n        if(selected.length === 0) {\n            return list;\n        }\n\n        return [...list, {\n            type: type.type,\n            courses: selected\n        }];\n    }, [])\n    .map(({ type, courses }) => (\n        <div className='type' key={type}>\n            <h3>{type}</h3>\n            {courses.map(({id, title}) => (\n                <div className='row' key={id}>\n                    <div>\n                        {title}\n                    </div>\n                    <iframe\n                        title={title}\n                        width=\"576\"\n                        height=\"317\"\n                        src={`https://www.youtube.com/embed/${id}`}\n                        frameborder=\"0\"\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                        allowfullscreen\n                    />\n                </div>\n            ))}\n        </div>\n    ));\n\n    return (\n        <div className='cart'>\n            <h1>\n                My Learning\n            </h1>\n            <div className='videos'>\n                {videos}\n            </div>\n        </div>\n    )\n}\n\nexport default MyLearning;","import React from 'react';\nimport './courseList.css';\n\nconst CourseList = ({ addToCart, courseType, disabled }) => {\n    const rows = courseType ? courseType.courses.map(course => {\n        const imgUrl = `https://img.youtube.com/vi/${course.id}/0.jpg`;\n        const isDisabled = disabled.indexOf(course.id) >= 0;\n\n        return (\n            <div\n                key={course.id}\n                className='course'\n            >\n                <img\n                    alt='thumbnail'\n                    src={imgUrl}\n                />\n\n                <h3>\n                    {course.title}\n                </h3>\n                <div>\n                    {course.description}\n                </div>\n                <div>\n                    Price: ${course.price}\n                </div>\n                {!isDisabled ? (\n                    <button\n                        onClick={() => {addToCart(course.id)}}\n                    >\n                        Add to Cart\n                    </button>\n                ) : (\n                    <div>\n                        Already in Cart / Purchased\n                    </div>\n                )}\n            </div>\n        )\n    }) : [];\n\n    return (\n        <div className='courseType'>\n            <h1>\n                { courseType && courseType.type } Courses\n            </h1>\n            <div className='courseRows'>\n                {rows}\n            </div>\n        </div>\n    )\n}\n\nexport default CourseList;","import React from 'react';\nimport './cart.css';\n\nconst Cart = ({ cartItems, checkout, courses, removeFromCart }) => {\n    const cartRows = courses.reduce((list, type) => {\n        const selected = type.courses.filter(({ id }) => cartItems.indexOf(id) >= 0);\n\n        if(selected.length === 0) {\n            return list;\n        }\n\n        return [...list, {\n            type: type.type,\n            courses: selected\n        }];\n    }, [])\n    .map(({ type, courses }) => (\n        <div className='type' key={type}>\n            <h3>{type}</h3>\n            {courses.map(({id, title, price}) => (\n                <div className='row' key={id}>\n                    <div>\n                        {title}\n                    </div>\n                    <div>\n                        ${price}\n                    </div>\n                    <button\n                        onClick={() => removeFromCart(id)}\n                    >\n                        Remove from cart\n                    </button>\n                </div>\n            ))}\n        </div>\n    ));\n\n    return (\n        <div className='cart'>\n            <h1>\n                My Cart\n            </h1>\n\n            {cartRows}\n\n            <div className='checkout'>\n                <button\n                    onClick={checkout}\n                >\n                    Checkout\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Cart;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Login from './Login';\nimport Header from './Header';\nimport Dashboard from './Dashboard';\nimport MyLearning from './MyLearning';\nimport CourseList from './CourseList';\n\nimport {\n    fetchIsLoggedIn,\n    fetchLogin,\n    fetchLogout,\n\n    fetchCourses,\n\n    fetchAddToCart,\n    fetchRemoveFromCart,\n    fetchCheckout\n} from './services';\nimport Cart from './Cart';\n\nconst App = () => {\n    const [ username, setUsername ] = useState('');\n    const [ isLoggedIn, login ] = useState(false);\n    const [ courses, setCourses ] = useState([]);\n    const [ cart, setCart ] = useState([]);\n    const [ purchased, setPurchased ] = useState([]);\n    \n    const user = {\n        username,\n        cart,\n        purchased\n    };\n\n    useEffect(() => {\n        fetchIsLoggedIn()\n            .then(onLoginSuccess);\n\n        fetchCourses()\n            .then(onCourseFetchSuccess);\n    }, [])\n\n    const onLoginSuccess = ({ data }) => {\n        setUsername(data.username);\n        login(true);\n        setCart(data.cart);\n        setPurchased(data.purchased);\n\n        return '/';\n    }\n\n    const onCourseFetchSuccess = ({ data }) => setCourses(data);\n\n    const loginUser = username => fetchLogin(username).then(onLoginSuccess);\n    \n    const logout = () => fetchLogout().then(() => {\n        setUsername('');\n        login(false);\n        setCart([]);\n    });\n\n    const addToCart = id => {\n        setCart([...cart, id]);\n        fetchAddToCart(id);\n    };\n\n    const removeFromCart = id => {\n        setCart(cart.filter(item => item !== id));\n        fetchRemoveFromCart(id);\n    }\n\n    const checkout = () => {\n        fetchCheckout()\n            .then(onLoginSuccess);\n    }\n\n    const routes = [(\n        <Route\n            exact\n            key='login'\n            path='/login'\n        >\n            <Login\n                loginUser={loginUser}\n                user={user}\n            />\n        </Route>\n    )]\n\n    if(isLoggedIn) {\n        routes.push(\n            (\n                <Route\n                    exact\n                    key='courseType'\n                    path='/courseType/:typeIndex'\n                    render={({ match }) => {\n                        const typeIndex = match.params.typeIndex;\n                        const courseType = courses[typeIndex];\n                        if(!courseType) {\n                            return;\n                        }\n\n                        return (\n                            <CourseList\n                                addToCart={addToCart}\n                                courseType={courseType}\n                                disabled={[\n                                    ...cart,\n                                    ...purchased\n                                ]}\n                            />\n                        )\n                    }}\n                />\n            ),\n            (\n                <Route\n                    exact\n                    key='myLearning'\n                    path='/myLearning'\n                >\n                    <MyLearning\n                        courses={courses}\n                        items={purchased}\n                    />\n                </Route>\n            ),\n            (\n                <Route\n                    exact\n                    key='cart'\n                    path='/cart'\n                >\n                    <Cart\n                        cartItems={cart}\n                        checkout={checkout}\n                        courses={courses}\n                        removeFromCart={removeFromCart}\n                    />\n                </Route>\n            ),\n            (\n                <Route\n                    key='dashboard'\n                    path='/'\n                >\n                    <Dashboard courses={ courses } />\n                </Route>\n            ),\n        )\n    }\n\n    routes.push(\n        <Route\n            path='/'\n            key='catchall'\n        >\n            <Login\n                loginUser={loginUser}\n                user={user}\n            />\n        </Route>\n    )\n\n    return (\n        <Router>\n            <Header user={user} logout={logout} />\n            <Switch>\n                {routes}\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App;","export const fetchIsLoggedIn = () => {\n\t\treturn fetch('/session', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: new Headers({\n\t\t\t\t'content-type': 'application/json',\n\t\t\t})\n\t\t})\n\t\t.catch( () => {\n\t\t\treturn Promise.reject({code: 'No Session'});\n\t\t})\n\t\t.then( (response) => {\n\t\t\t \n\t\t\tif(!response.ok) {\n\t\t\t\treturn response.json().then( result => Promise.reject(result) );\n\t\t\t}\n\t\t\treturn response.json();\n\t\t});\n};\n\nexport const fetchLogin = (username) => {\n\t\treturn fetch('/session', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: new Headers({\n\t\t\t\t'content-type': 'application/json',\n\t\t\t}),\n\t\t\tbody: JSON.stringify({ username }),\n\t\t})\n\t\t.catch( () => {\n\t\t\treturn Promise.reject({code: 'network-error'});\n\t\t})\n\t\t.then( (response) => {\n\t\t\t \n\t\t\tif(!response.ok) {\n\t\t\t\treturn response.json().then( result => Promise.reject(result) );\n\t\t\t}\n\t\t\treturn response.json();\n\t\t});\n};\n\nexport const fetchLogout = () => {\n\t\treturn fetch('/session', {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: new Headers({\n\t\t\t\t'content-type': 'application/json',\n\t\t\t})\n\t\t})\n\t\t.catch( () => {\n\t\t\treturn Promise.reject({code: 'network-error'});\n\t\t})\n\t\t.then( (response) => {\n\t\t\t \n\t\t\tif(!response.ok) {\n\t\t\t\treturn response.json().then( result => Promise.reject(result) );\n\t\t\t}\n\t\t\treturn;\n\t\t});\n};\n\nexport const fetchCourses = () => {\n\t\treturn fetch('/courses', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: new Headers({\n\t\t\t\t'content-type': 'application/json',\n\t\t\t})\n\t\t})\n\t\t.catch( () => {\n\t\t\treturn Promise.reject({code: 'network-error'});\n\t\t})\n\t\t.then( (response) => {\n\t\t\t \n\t\t\tif(!response.ok) {\n\t\t\t\treturn response.json().then( result => Promise.reject(result) );\n\t\t\t}\n\t\t\treturn response.json();\n\t\t});\n}\n\nexport const fetchAddToCart = id => {\n\treturn fetch(`/cartApi/${id}`, {\n        method: 'PUT',\n        headers: new Headers({\n            'content-type': 'application/json',\n        })\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n            \n        if(!response.ok) {\n            return response.json().then( result => Promise.reject(result) );\n        }\n        return;\n    });\n}\n\nexport const fetchRemoveFromCart = id => {\n\treturn fetch(`/cartApi/${id}`, {\n        method: 'DELETE',\n        headers: new Headers({\n            'content-type': 'application/json',\n        })\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n            \n        if(!response.ok) {\n            return response.json().then( result => Promise.reject(result) );\n        }\n        return;\n    });\n}\n\nexport const fetchCheckout = () => {\n\treturn fetch('/cartApi/checkout', {\n        method: 'GET',\n        headers: new Headers({\n            'content-type': 'application/json',\n        })\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n            \n        if(!response.ok) {\n            return response.json().then( result => Promise.reject(result) );\n        }\n        return response.json();\n    });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
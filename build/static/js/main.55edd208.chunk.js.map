{"version":3,"sources":["images/logo.jpeg","Login.jsx","Header.jsx","Dashboard.jsx","App.jsx","api.js","serviceWorker.js","index.js"],"names":["module","exports","LoginPanel","loginUser","user","useState","username","setUsername","redirect","setRedirect","to","push","className","value","type","onChange","target","disabled","onClick","then","redirectPath","Header","logout","isLoggedIn","border","src","require","alt","width","height","Dashboard","courses","console","log","rows","map","videos","key","video","imgUrl","App","login","setCourses","useEffect","fetch","method","headers","Headers","catch","Promise","reject","code","response","ok","json","result","onLoginSuccess","onCourseFetchSuccess","data","body","JSON","stringify","fetchLogin","routes","exact","path","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.55edd208.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b297c66f.jpeg\";","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './login.css';\n\nconst LoginPanel = ({ loginUser, user }) => {   \n    const [ username, setUsername ]  = useState(user.username);\n    const [ redirect, setRedirect ] = useState();\n\n    const changeUsername = ({ target: { value }}) => setUsername(value);\n    const login = () => loginUser(username).then(redirectPath => setRedirect(redirectPath));\n\n    if(redirect) {\n        return (\n            <Redirect to={redirect} push />\n        )\n    }\n\n    return (\n        <div className=\"login-panel\"> \n            <span>Login</span>\n            <input\n                value={username}\n                type='text'\n                onChange={changeUsername}\n            />\n            <button\n                disabled={!username}\n                onClick={login}\n            >\n                Login\n            </button>\n        </div>\n    );\n};\n\nexport default LoginPanel;","import React from 'react';\nimport './header.css';\n\nconst Header = ({ user, logout }) => {\n    const isLoggedIn = user.username;\n\n    return (\n        <div className=\"Application-header\">\n            <div>\n                <img className=\"company-logo\" border=\"0\" src={require('./images/logo.jpeg')} alt=\"logo\" width=\"40\" height=\"40\"/>\n                <h1 className=\"company-name\">Tek Learning</h1>\n            </div>\n\n            {isLoggedIn && (\n                <div>\n                    <h2>\n                        {user.username}\n                    </h2>\n                    <button onClick={logout}>\n                        Logout\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport './dashboard.css';\n\nconst Dashboard = ({ courses }) => {\n    console.log({courses})\n\n    const rows = courses.map(({ type, videos }) => (\n        <div\n            key={type}\n            className='courseRow'\n        >\n            <h3>\n                {type}\n            </h3>\n\n            <div>\n                {videos.map(video => {\n                    const imgUrl = `https://img.youtube.com/vi/${video}/0.jpg`;\n                    return (\n                        <img\n                            alt='thumbnail'\n                            key={video}\n                            src={imgUrl}\n                        />\n                    )\n                })}\n            </div>\n\n            <hr />\n        </div>\n    ));\n\n    return (\n        <div className='dashboard'>\n            {rows}\n        </div>\n    )\n}\n\nexport default Dashboard;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Login from './Login';\nimport Header from './Header';\nimport Dashboard from './Dashboard';\n\nimport {\n    fetchIsLoggedIn,\n    fetchLogin,\n    fetchLogout,\n\n    fetchCourses\n} from './api';\n\nconst App = () => {\n\t\tconst [ username, setUsername ] = useState('');\n        const [ isLoggedIn, login ] = useState(false);\n        const [ courses, setCourses ] = useState([]);\n        \n        const user = {\n            username\n        };\n\n        useEffect(() => {\n            fetchIsLoggedIn()\n                .then(onLoginSuccess);\n\n            fetchCourses()\n                .then(onCourseFetchSuccess);\n        }, [])\n\n        const onLoginSuccess = ({ data }) => {\n            setUsername(data.username);\n            login(true);\n\n            return '/dashboard';\n        }\n\n        const onCourseFetchSuccess = ({ data }) => setCourses(data);\n\n\t\tconst loginUser = username => fetchLogin(username).then(onLoginSuccess);\n        \n        const logout = () => fetchLogout().then(() => {\n            setUsername('');\n            login(false);\n        });\n\n\t\tconst routes = [(\n            <Route\n                exact\n                key='login'\n                path='/login'\n            >\n                <Login\n                    loginUser={loginUser}\n                    user={user}\n                />\n            </Route>\n        )]\n\n\t\tif(isLoggedIn) {\n            routes.push(\n                (\n                    <Route\n                        exact\n                        key='dashboard'\n                        path='/dashboard'\n                    >\n                        <Dashboard courses={ courses } />\n                    </Route>\n                ),\n                (\n                    <Route\n                        exact\n                        key='cart'\n                        path='/cart'\n                    >\n\n                    </Route>\n                )\n            )\n\t\t}\n\n\t\troutes.push(\n            <Route\n                path='/'\n                key='catchall'\n            >\n                <Login\n                    loginUser={loginUser}\n                    user={user}\n                />\n            </Route>\n\t\t)\n\n\t\treturn (\n            <Router>\n                <Header user={user} logout={logout} />\n                <Switch>\n                    {routes}\n                </Switch>\n            </Router>\n\t\t)\n}\n\nexport default App;","export const fetchIsLoggedIn = () => {\n    return fetch('/_api/session', {\n      method: 'GET',\n      headers: new Headers({\n        'content-type': 'application/json',\n      })\n    })\n    .catch( () => {\n      return Promise.reject({code: 'No Session'});\n    })\n    .then( (response) => {\n       \n      if(!response.ok) {\n        return response.json().then( result => Promise.reject(result) );\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogin = (username) => {\n    return fetch('/_api/session', {\n      method: 'POST',\n      headers: new Headers({\n        'content-type': 'application/json',\n      }),\n      body: JSON.stringify({ username }),\n    })\n    .catch( () => {\n      return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n       \n      if(!response.ok) {\n        return response.json().then( result => Promise.reject(result) );\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogout = () => {\n    return fetch('/_api/session', {\n      method: 'DELETE',\n      headers: new Headers({\n        'content-type': 'application/json',\n      })\n    })\n    .catch( () => {\n      return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n       \n      if(!response.ok) {\n        return response.json().then( result => Promise.reject(result) );\n      }\n      return;\n    });\n};\n\nexport const fetchCourses = () => {\n    return fetch('/_api/courses', {\n      method: 'GET',\n      headers: new Headers({\n        'content-type': 'application/json',\n      })\n    })\n    .catch( () => {\n      return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n       \n      if(!response.ok) {\n        return response.json().then( result => Promise.reject(result) );\n      }\n      return response.json();\n    });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}